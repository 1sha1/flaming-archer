<?php

namespace Fa\Authentication\Storage;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-13 at 20:38:48.
 */
class EncryptedCookieTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var EncryptedCookie
     */
    protected $cookie;
    
    /**
     * @var \Slim\Slim
     */
    protected $app;
    
    /**
     * @var string JSON contents of cookie
     */
    protected $cookieContents = '{"message":"Cookie contents"}';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->app = $this->getMock('\Slim\Slim', array('getEncryptedCookie', 'setEncryptedCookie', 'deleteCookie'), array(), '', false);
        $this->cookie = new EncryptedCookie($this->app, 'cookieName');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->cookie = null;
    }
    
    public function testConstuction()
    {
        $this->assertInstanceOf('Fa\Authentication\Storage\EncryptedCookie', $this->cookie);
        $this->assertInstanceOf('\Zend\Authentication\Storage\StorageInterface', $this->cookie);
    }

    /**
     * @covers Fa\Authentication\Storage\EncryptedCookie::isEmpty
     */
    public function testIsEmptyTrue()
    {
        $this->app->expects($this->once())
                ->method('getEncryptedCookie')
                ->with('cookieName')
                ->will($this->returnValue(false));
        $this->assertTrue($this->cookie->isEmpty());
    }
    
    /**
     * @covers Fa\Authentication\Storage\EncryptedCookie::isEmpty
     */
    public function testIsEmptyFalse()
    {
        $this->app->expects($this->once())
                ->method('getEncryptedCookie')
                ->with('cookieName')
                ->will($this->returnValue($this->cookieContents));
        $this->assertFalse($this->cookie->isEmpty());
    }

    /**
     * @covers Fa\Authentication\Storage\EncryptedCookie::read
     */
    public function testRead()
    {
        $this->app->expects($this->once())
                ->method('getEncryptedCookie')
                ->with('cookieName')
                ->will($this->returnValue($this->cookieContents));
        $contents = $this->cookie->read();
        $this->assertEquals(json_decode($this->cookieContents, true), $contents);
    }

    /**
     * @covers Fa\Authentication\Storage\EncryptedCookie::write
     */
    public function testWrite()
    {
        $this->app->expects($this->once())
                ->method('setEncryptedCookie')
                ->with('cookieName', json_encode(array("I'm a cookie")), '1 day');
        $this->cookie->setTime('1 day');
        $this->cookie->write(array("I'm a cookie"));
    }

    /**
     * @covers Fa\Authentication\Storage\EncryptedCookie::clear
     * @todo   Implement testClear().
     */
    public function testClear()
    {
        $this->app->expects($this->once())
                ->method('deleteCookie')
                ->with('cookieName');
        $this->cookie->clear();
    }

}
