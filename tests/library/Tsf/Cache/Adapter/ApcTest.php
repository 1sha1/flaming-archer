<?php

namespace Tsf\Cache\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-15 at 06:20:48.
 */
class ApcTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Apc
     */
    protected $adapter;
    
    /**
     * @var string Cache key
     */
    protected $cacheKey = 'cacheKey';
    
    /**
     * @var string Value to store in cache
     */
    protected $cachedValue = 'I will be stored in cache';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if (!extension_loaded('apc')) {
            $this->markTestSkipped('Required extension apc is not available.');
        }
        apc_clear_cache('user');
        $this->adapter = new Apc;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        apc_clear_cache('user');
        $this->adapter = null;
    }

    /**
     * @covers Tsf\Cache\Adapter\Apc::fetch
     */
    public function testFetchCacheMiss()
    {
        $fetchedValue = $this->adapter->fetch($this->cacheKey, $success);
        $this->assertFalse($fetchedValue);
        $this->assertFalse($success);
    }
    
    /**
     * @covers Tsf\Cache\Adapter\Apc::fetch
     */
    public function testFetchCacheHit()
    {
        $this->assertTrue(apc_store($this->cacheKey, $this->cachedValue));
        
        $fetchedValue = $this->adapter->fetch($this->cacheKey, $success);
        $this->assertEquals($this->cachedValue, $fetchedValue);
        $this->assertTrue($success);
    }

    /**
     * @covers Tsf\Cache\Adapter\Apc::store
     */
    public function testStore()
    {
        $this->assertTrue($this->adapter->store($this->cacheKey, $this->cachedValue));
        
        $fetchedValue = $this->adapter->fetch($this->cacheKey, $success);
        $this->assertEquals($this->cachedValue, $fetchedValue);
        $this->assertTrue($success);
    }

    /**
     * @covers Tsf\Cache\Adapter\Apc::add
     */
    public function testAdd()
    {
        $this->assertFalse(apc_fetch($this->cacheKey));
        
        $this->assertTrue($this->adapter->add($this->cacheKey, $this->cachedValue));
        $fetchedValue = $this->adapter->fetch($this->cacheKey, $success);
        $this->assertEquals($this->cachedValue, $fetchedValue);
        $this->assertTrue($success);
    }
    
    /**
     * @covers Tsf\Cache\Adapter\Apc::add
     */
    public function testAddDoesNotOverwriteExistingValue()
    {
        $this->assertFalse(apc_fetch($this->cacheKey));
        $this->assertTrue(apc_store($this->cacheKey, $this->cachedValue));
        
        $this->assertFalse($this->adapter->add($this->cacheKey, 'Should not be stored'));
        $fetchedValue = $this->adapter->fetch($this->cacheKey, $success);
        $this->assertEquals($this->cachedValue, $fetchedValue);
        $this->assertTrue($success);
    }

    /**
     * @covers Tsf\Cache\Adapter\Apc::clear
     */
    public function testClear()
    {
        $this->assertTrue(apc_store($this->cacheKey, $this->cachedValue));
        $this->assertEquals($this->cachedValue, apc_fetch($this->cacheKey));
        
        $this->assertTrue($this->adapter->clear('user'));
        
        $this->assertFalse(apc_fetch($this->cacheKey));
    }

}
