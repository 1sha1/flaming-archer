<?php

namespace Tsf\Middleware;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-14 at 06:50:48.
 */
class AuthenticationTest extends \PHPUnit_Framework_TestCase
{

    public function testVisitHomePageNotLoggedInSucceeds()
    {
        \Slim\Environment::mock(array(
            'SCRIPT_NAME' => '/index.php',
            'PATH_INFO' => '/'
        ));
        
        $app = new \Slim\Slim();
        
        $app->get('/', function() {
            echo 'Success';
        });
        
        $auththenticationService = $this->getMock('Zend\Authentication\AuthenticationService');
        
        $mw = new Authentication($auththenticationService);
        $mw->setApplication($app);
        $mw->setNextMiddleware($app);
        $mw->call();
        $response = $app->response();
        $this->assertTrue($response->isOk());
    }
    
    public function testVisitAdminPageNotLoggedInRedirectsToLogin()
    {
        \Slim\Environment::mock(array(
            'SCRIPT_NAME' => '/index.php',
            'PATH_INFO' => '/admin'
        ));
        
        $app = new \Slim\Slim();
        
        $app->get('/admin', function() {
            echo 'Y U NO LOGGED IN';
        });
        
        $auththenticationService = $this->getMock('Zend\Authentication\AuthenticationService', array('hasIdentity'));
        
        $auththenticationService->expects($this->once())
                ->method('hasIdentity')
                ->will($this->returnValue(false));
        
        $mw = new Authentication($auththenticationService);
        $mw->setApplication($app);
        $mw->setNextMiddleware($app);
        $mw->call();
        $response = $app->response();
        $this->assertTrue($response->isRedirect());
        $this->assertEquals(302, $response->status());
        $this->assertEquals('/login', $response->header('location'));
    }
    
    public function testVisitAdminPageLoggedInSucceeds()
    {
        \Slim\Environment::mock(array(
            'SCRIPT_NAME' => '/index.php',
            'PATH_INFO' => '/admin'
        ));
        
        $app = new \Slim\Slim();
        
        $app->get('/admin', function() {
            echo 'Success';
        });
        
        $auththenticationService = $this->getMock('Zend\Authentication\AuthenticationService', array('hasIdentity'));
        
        $auththenticationService->expects($this->once())
                ->method('hasIdentity')
                ->will($this->returnValue(true));
        
        $mw = new Authentication($auththenticationService);
        $mw->setApplication($app);
        $mw->setNextMiddleware($app);
        $mw->call();
        $response = $app->response();
        $this->assertTrue($response->isOk());
    }

}
