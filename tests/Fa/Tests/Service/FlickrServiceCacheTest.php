<?php

namespace FA\Tests\Service;

use FA\Service\FlickrServiceCache;
use Zend\Cache\StorageFActory;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-17 at 17:44:43.
 */
class FlickrServiceCacheTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var FlickrServiceCache
     */
    protected $serviceCache;

    /**
     * @var FlickrService
     */
    protected $service;
    
    /**
     * @var \Zend\Cache\Storage\Adapter\AdapterAbstract
     */
    protected $cache;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->service = $this->getMock('FA\Service\FlickrService', array('getSizes'), array(), '', false);
        $this->cache = $this->getMock('\Zend\Cache\Storage\Adapter\AbstractAdapter', array('getItem', 'addItem'), array(), '', false, false, false);

        $this->serviceCache = new FlickrServiceCache($this->service, $this->cache);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->service = null;
    }

    public function testGetSizesCacheMiss()
    {
        $this->cache->expects($this->once())
                ->method('getItem')
                ->with(1234)
                ->will($this->returnValue(null));

        $this->service->expects($this->once())
                ->method('getSizes')
                ->with(1234)
                ->will($this->returnValue(array('Image information')));

        $this->cache->expects($this->once())
                ->method('addItem')
                ->with(1234, array('Image information'))
                ->will($this->returnValue(true));

        $result = $this->serviceCache->getSizes(1234);

        $this->assertEquals(array('Image information'), $result);
    }

    public function testGetSizesCacheHit()
    {
        $this->cache->expects($this->once())
                ->method('getItem')
                ->with(1234)
                ->will($this->returnValue(array('Image information')));
        
        $this->service->expects($this->never())->method('getSizes');

        $result = $this->serviceCache->getSizes(1234);

        $this->assertEquals(array('Image information'), $result);
    }

}
