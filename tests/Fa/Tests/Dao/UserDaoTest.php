<?php

namespace Fa\Tests\Dao;

use Fa\Dao\UserDao;
use Fa\Entity\User;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-16 at 20:25:49.
 */
class UserDaoTest extends CommonDbTestCase
{
    /**
     * @var UserDao
     */
    protected $dao;

    /**
     * @var User User
     */
    protected $user;

    /**
     * @var array
     */
    protected $userData;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->dao = new UserDao($this->db);
        $this->userData = array(
            'id' => 42,
            'firstName' => 'Zaphod',
            'lastName' => 'Beeblebrox',
            'email' => 'Test@Example.COM',
            'flickrUsername' => 'trillian',
            'flickrApiKey' => '12342342',
            'externalUrl' => 'http://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy_(novel)',
            'passwordHash' => 'fjdkslfjdlksjfkljlksjlsdj',
            'lastLogin' => new \DateTime('now'),
        );
        $this->user = new User($this->userData);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->dao = null;
        parent::tearDown();
    }

    public function testFindByEmail()
    {
        $user = new User($this->userData);
        $this->dao->save($user);

        $user = $this->dao->findByEmail($this->userData['email']);

        $this->assertNotNull($user);
        $this->assertInstanceOf('Fa\Entity\User', $user);
        $this->assertEquals($this->user, $user);
    }

    public function testFindByEmailUserNotExist()
    {
        $user = $this->dao->findByEmail('snoop@lion.com');
        $this->assertFalse($user);
    }

    public function testFindAll()
    {
        $this->dao->save(new User($this->userData));
        $result = $this->dao->findAll();
        $this->assertInternalType('array', $result);
        $this->assertEquals(2, count($result));
        $this->assertEquals($this->user, $result[1]);
    }

    public function testSaveNewUser()
    {
        $result = $this->dao->save(new User($this->userData));
        $this->assertInstanceOf('Fa\Entity\User', $result);

        $user = $this->dao->findByEmail($this->userData['email']);

        $this->assertInternalType('int', $user->getId());
        $this->assertEquals($this->userData['firstName'], $user->getFirstName());
        $this->assertEquals($this->userData['lastName'], $user->getLastName());
        $this->assertEquals($this->userData['email'], $user->getEmail());
        $this->assertEquals($this->userData['flickrUsername'], $user->getFlickrUsername());
        $this->assertEquals($this->userData['flickrApiKey'], $user->getFlickrApiKey());
        $this->assertEquals($this->userData['externalUrl'], $user->getExternalUrl());
        $this->assertEquals($this->userData['passwordHash'], $user->getPasswordHash());
        $this->assertEquals($this->userData['lastLogin'], $user->getLastLogin());
    }

    public function testSaveUpdatesExistingUser()
    {
        $newApiKey = 'hf399283hsni92780s070';
        $user = $this->dao->save(new User($this->userData));
        $user->setFlickrApiKey($newApiKey);
        $user = $this->dao->save($user);
        $this->assertEquals($newApiKey, $user->getFlickrApiKey());
    }
    
    public function testRecordLogin()
    {
        $user = $this->dao->save(new User($this->userData));
        $user = $this->dao->recordLogin($user->getEmailCanonical());
        $this->assertNotNull($user->getLastLogin());
        $now = new \DateTime('now');
        $interval = $now->diff($user->getLastLogin());
        $this->assertLessThanOrEqual(3, $interval->s, "lastLogin wasn't updated within the last 3 seconds.");
    }

    public function testRecordLoginThrowsInvalidArgumentExceptionIfUserDoesNotExist()
    {
        $email = 'user@does-not-exist.com';
        $this->setExpectedException('\InvalidArgumentException',  $email . ' does not exist');
        $this->dao->recordLogin($email);
    }
}
