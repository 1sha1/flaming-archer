<?php

namespace Fa\Tests\Dao;

use \DateTime;
use Fa\Dao\UserDao;
use Fa\Entity\User;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-16 at 20:25:49.
 */
class UserDaoTest extends CommonDbTestCase
{
    /**
     * @var UserDao
     */
    protected $dao;

    /**
     * @var array
     */
    protected $userData;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->db->exec("DELETE FROM `users`");
        $this->dao = new UserDao($this->db);
        $this->userData = array(
            'id' => 42,
            'firstName' => 'Zaphod',
            'lastName' => 'Beeblebrox',
            'email' => 'Zaphod@Beeblebrox.com',
            'flickrUsername' => 'trillian',
            'flickrApiKey' => '12342342',
            'externalUrl' => 'http://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy_(novel)',
            'passwordHash' => 'fjdkslfjdlksjfkljlksjlsdj',
            'lastLogin' => new DateTime('now'),
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->dao = null;
        parent::tearDown();
    }

    public function testFind()
    {
        $newUser = $this->dao->save(new User($this->userData));

        $id = $this->dao->getDb()->lastInsertId();

        $user = $this->dao->find($id);
        $this->assertEquals($newUser, $user);
    }

    public function testFindUserReturnsFalseIfUserDoesNotExist()
    {
        $this->assertFalse($this->dao->find(123412341423));
    }

    public function testGetDb()
    {
        $this->assertInstanceOf('PDO', $this->dao->getDb());
    }

    public function testFindByEmailCanonical()
    {
        $newUser = $this->dao->save(new User($this->userData));
        $foundUser = $this->dao->findByEmailCanonical($this->userData['email']);

        $this->assertNotNull($foundUser);
        $this->assertInstanceOf('Fa\Entity\User', $foundUser);
        $this->assertEquals($newUser, $foundUser);
    }

    public function testFindByEmailUserNotExist()
    {
        $user = $this->dao->findByEmailCanonical('snoop@lion.com');
        $this->assertFalse($user);
    }

    public function testFindAll()
    {
        $user = $this->dao->save(new User($this->userData));
        $result = $this->dao->findAll();
        $this->assertInternalType('array', $result);
        $this->assertEquals(1, count($result));
        $this->assertEquals($user, $result[0]);
    }

    public function testSaveNewUser()
    {
        $result = $this->dao->save(new User($this->userData));
        $this->assertInstanceOf('Fa\Entity\User', $result);

        $user = $this->dao->findByEmailCanonical($this->userData['email']);

        $this->assertInternalType('int', $user->getId());
        $this->assertEquals($this->userData['firstName'], $user->getFirstName());
        $this->assertEquals($this->userData['lastName'], $user->getLastName());
        $this->assertEquals($this->userData['email'], $user->getEmail());
        $this->assertEquals($this->userData['flickrUsername'], $user->getFlickrUsername());
        $this->assertEquals($this->userData['flickrApiKey'], $user->getFlickrApiKey());
        $this->assertEquals($this->userData['externalUrl'], $user->getExternalUrl());
        $this->assertEquals($this->userData['passwordHash'], $user->getPasswordHash());
        $this->assertEquals($this->userData['lastLogin'], $user->getLastLogin());
    }

    public function testSaveUpdatesExistingUser()
    {
        $newApiKey = 'hf399283hsni92780s070';
        $user = $this->dao->save(new User($this->userData));
        $user->setFlickrApiKey($newApiKey);
        $user = $this->dao->save($user);
        $this->assertEquals($newApiKey, $user->getFlickrApiKey());
    }

    public function testCannotSaveMoreThanOneUser()
    {
        $this->setExpectedException(
            'Fa\Exception\UserLimitException', 
            'No more than one user is allowed.'
        );
        $this->dao->save(new User($this->userData));
        $this->userData['id'] = 9999;
        $this->userData['email'] = 'zaphod@hotmail.com';
        $this->dao->save(new User($this->userData));
    }

    public function testRecordLogin()
    {
        $user = $this->dao->save(new User($this->userData));
        $user = $this->dao->recordLogin($user->getEmailCanonical());
        $this->assertNotNull($user->getLastLogin());
        $now = new DateTime('now');
        $interval = $now->diff($user->getLastLogin());
        $this->assertLessThanOrEqual(3, $interval->s, "lastLogin wasn't updated within the last 3 seconds.");
    }

    public function testRecordLoginThrowsInvalidArgumentExceptionIfUserDoesNotExist()
    {
        $email = 'user@does-not-exist.com';
        $this->setExpectedException('\InvalidArgumentException',  $email . ' does not exist');
        $this->dao->recordLogin($email);
    }

    public function testFormatTimestamp()
    {
        $format = 'Y-m-d H:i:s';
        $expected = '2020-10-02 10:00:00';
        $timestamp = DateTime::createFromFormat($format, $expected);
        $actual = $this->dao->formatTimestamp($timestamp);
        $this->assertEquals($expected, $actual);
    }

    public function testFormatTimestampWhenTimestampNull()
    {
        $timestamp = null;
        $output = $this->dao->formatTimestamp($timestamp);
        $this->assertNull($output);
    }

    public function testGetSetFormat()
    {
        // Default format
        $this->assertEquals('Y-m-d H:i:s', $this->dao->getFormat());
        $this->dao->setFormat(DateTime::ISO8601);
        $this->assertEquals(DateTime::ISO8601, $this->dao->getFormat());
    }

    public function testUserExists()
    {
        $this->dao->save(new User($this->userData));
        $this->assertTrue($this->dao->userExists());
    }
}
