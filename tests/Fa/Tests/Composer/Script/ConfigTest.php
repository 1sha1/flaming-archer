<?php

namespace Fa\Tests\Composer\Script;

use Fa\Composer\Script\Config;
use org\bovigo\vfs\vfsStream;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-20 at 06:56:07.
 */
class ConfigTest extends ComposerScriptTestCase
{

    /**
     * @var  vfsStreamDirectory
     */
    protected $root;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->root = vfsStream::setup('dev.flaming-archer');
        vfsStream::create(array('config-dist.php' => 'config without secure data', 'vendor' => array()), $this->root);
        $webroot = vfsStream::url('dev.flaming-archer');
        
        parent::setUp();
        
        // Replacing default vendor directory with mocked filesystem
        $this->composerConfig->merge(array('config' => array('vendor-dir' => $webroot . '/vendor')));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

    public function testCreateConfigNotFound()
    {
        // Confirm mock filesystem doesn't contain config.php
        $this->assertFalse($this->root->hasChild('config.php'));

        $output = array(
            'Reviewing your Flaming Archer environment . . .',
            'Creating config.php by copying config-dist.php . . .',
            "Done! Please edit config.php and add your Flickr API key to 'flickr.api.key' and change 'cookie['secret']'."
        );

        // Configure expectations
        foreach ($output as $index => $message) {
            $this->outputMock->expects($this->at($index))
                    ->method('write')
                    ->with($this->equalTo($message), $this->equalTo(true));
        }

        $this->composerMock->expects($this->once())
                ->method('getConfig')
                ->will($this->returnValue($this->composerConfig));

        $result = Config::create($this->event);
        $this->assertTrue($this->root->hasChild('config.php'));
    }
    
    public function testCreateConfigFound()
    {
        // Confirm mock filesystem contains config.php
        vfsStream::create(array('config.php' => 'config without secure data'), $this->root);
        $this->assertTrue($this->root->hasChild('config.php'));

        $output = array(
            'Reviewing your Flaming Archer environment . . .',
            'Found config.php.'
        );

        // Configure expectations
        foreach ($output as $index => $message) {
            $this->outputMock->expects($this->at($index))
                    ->method('write')
                    ->with($this->equalTo($message), $this->equalTo(true));
        }

        $this->composerMock->expects($this->once())
                ->method('getConfig')
                ->will($this->returnValue($this->composerConfig));

        $result = Config::create($this->event);
    }

}
