<?php

namespace FA\Tests\Dao;

use FA\Dao\UserDao;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-16 at 20:25:49.
 */
class UserDaoTest extends CommonDbTestCase
{

    /**
     * @var UserDao
     */
    protected $dao;
    
    /**
     * @var array User
     */
    protected $user;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->dao = new UserDao($this->db);
        $this->user = array(
            'id' => '1',
            'email' => 'user@example.com',
            'password_hash' => '$2y$12$pZg9j8DBSIP2R/vfDzTQOeIt5n57r5VigCUl/HH.FrBOadi3YhdPS',
            'last_login' => null
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->dao = null;
        parent::tearDown();
    }

    /**
     * @covers FA\Dao\UserDao::findByEmail
     * @todo   Implement testFindByEmail().
     */
    public function testFindByEmail()
    {
        $user = $this->dao->findByEmail('user@example.com');
        
        $this->assertNotNull($user);
        $this->assertEquals($this->user, $user);
    }
    
    public function testFindByEmailUserNotExist()
    {
        $user = $this->dao->findByEmail('snoop@lion.com');
        $this->assertFAlse($user);
    }
    
    public function testFindAll()
    {
        $result = $this->dao->findAll();
        $this->assertInternalType('array', $result);
        $this->assertEquals(1, count($result));
        $this->assertEquals($this->user, $result[0]);
    }

    public function testRecordLogin()
    {
        $now = new \DateTime('now');
        $email = 'user@example.com';
        $this->assertTrue($this->dao->recordLogin($email));
        $user = $this->dao->findByEmail($email);
        $this->assertNotNull($user['last_login']);
        $last_login = new \DateTime($user['last_login']);
        $interval = $now->diff($last_login);
        $this->assertLessThanOrEqual(3, $interval->s, "last_login wasn't updated within the last 3 seconds.");
    }
}
